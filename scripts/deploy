#!/bin/bash
set -e

source ${SCRIPTS_DIR}/lib/cluster_settings
source ${SCRIPTS_DIR}/lib/debug_functions
source ${SCRIPTS_DIR}/lib/deploy_funcs
source ${SCRIPTS_DIR}/lib/utils
source ${SCRIPTS_DIR}/lib/version

### Functions ###

function update_coredns_deployment() {
    echo "Updating coredns to patched image}..."
    kubectl set image -n kube-system deploy/coredns coredns=localhost:5000/lighthouse-coredns:local
    echo "Waiting for coredns deployment to be Ready on cluster${i}."
    kubectl rollout status -n kube-system deploy/coredns --timeout=60s
    echo "Updating coredns clusterrole in to cluster${i}..."
    cat <(kubectl get clusterrole system:coredns -n kube-system -o yaml) ${DAPPER_SOURCE}/scripts/resources/patch-coredns-clusterrole.yaml >/tmp/clusterroledns-${cluster}.yaml
    kubectl apply -n kube-system -f /tmp/clusterroledns-${cluster}.yaml
}

function update_coredns_configmap() {
    kubectl -n kube-system replace -f ${DAPPER_SOURCE}/scripts/resources/coredns-cm.yaml
    kubectl -n kube-system describe cm coredns
}

function install_service_export() {
    kubectl apply -f ${DAPPER_SOURCE}/package/lighthouse-crd.yaml
    kubectl get crds | grep serviceexport
}

### Main ###

declare_kubeconfig
import_image quay.io/submariner/lighthouse-agent
import_image quay.io/submariner/lighthouse-coredns

run_subm_clusters update_coredns_configmap
run_subm_clusters update_coredns_deployment
#run_subm_clusters install_service_export

${SCRIPTS_DIR}/deploy.sh "$@"
